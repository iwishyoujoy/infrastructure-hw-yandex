name: Release

on:
  create:
    tags:
    - 'v*'
  pull_request:

jobs:
  release:
    name: release process
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    
    - name: Install dependencies
      run: npm ci

    - name: Validate PR commits with commitlint
      if: github.event_name == 'pull_request'
      run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

    - name: Check release version from tag
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Generate changelog
      run: npx standard-version --skip.commit --skip.tag

    - name: Upload Changelog
      uses: actions/upload-artifact@v2
      with:
        name: Changelog
        path: CHANGELOG.md

    - name: Read Changelog
      id: changelog
      run: |
        echo "::set-output name=body::$(cat ./CHANGELOG.md | sed 's/$/\\n/' | tr -d '\n')"

    - name: Create Release Issue
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.RELEASE_PAT }}
        script: |
          const issueTitle = `Release ${process.env.RELEASE_VERSION}`
          let body = `Author: ${context.payload.sender.login}\n`
          body += `Date: ${new Date().toLocaleString()}\n`
          body += `Version: ${process.env.RELEASE_VERSION}\n\n`
          body += 'Changelog: \n'
          body += `${{ steps.changelog.outputs.body }}\n`
          
          // searching for issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          })

          const existingIssue = issues.find(issue => issue.title === issueTitle)

          if (existingIssue) {
            // if issue exists, update it
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: body
            })
          } else {
            // if issue doesn't exist, create new one
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: body,
              labels: ['RELEASE']
            })
          }

    - name: Build
      run: npm run build

    - name: Run unit tests
      run: npm run test

    - name: Install Playwright
      run: npx playwright install

    - name: Run e2e tests
      run: npm run e2e

    - name: Update Issue with Check Run URL
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.RELEASE_PAT }}
        script: |
          const runId = context.runId;
          const issueTitle = `Release ${process.env.RELEASE_VERSION}`;

          console.log(issueTitle);

          const checksURL = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${runId}`;
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const releaseIssue = issues.find(issue => issue.title === issueTitle);

          console.log(releaseIssue);

          const body =  `${releaseIssue.body}\n\n[Check results](${checksURL}).`;
          github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: releaseIssue.number,
            body: body,
          });
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.PERSONAL_TOKEN }}
        publish_dir: ./build

    - name: Add Deploy Link to Release Issue
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.RELEASE_PAT }}
        script: |
          const issueTitle = `Release ${process.env.RELEASE_VERSION}`;

          console.log(issueTitle);

          const deployURL = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/`;

          console.log(deployURL);

          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const releaseIssue = issues.find(issue => issue.title === issueTitle);
          const body = `${releaseIssue.body}\n\n[Deploy results](${deployURL}).`;
          github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: releaseIssue.number,
            body: body,
          });

    - name: Close Release Issue
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.RELEASE_PAT }}
        script: |
          const issueTitle = `Release ${process.env.RELEASE_VERSION}`;
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const releaseIssue = issues.find(issue => issue.title === issueTitle);
          github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: releaseIssue.number,
            state: 'closed',
          });